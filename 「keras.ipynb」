{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"「keras.ipynb」","provenance":[{"file_id":"1a7NvJU114gVuIEXpYAFa0-7enJs1YS_I","timestamp":1646966775977}],"collapsed_sections":[],"authorship_tag":"ABX9TyNY3bczMmQsqIjmUy/nT3Le"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# 目標函數:y=x^2\n","def func(x): return np.square(x)\n","\n","# 目標函數一階導數:dy/dx=2*x\n","def dfunc(x): return 2 * x\n","\n","def GD(x_start, df, epochs, lr):    \n","       \n","    xs = np.zeros(epochs+1)    \n","    x = x_start    \n","    xs[0] = x    \n","    for i in range(epochs):         \n","        dx = df(x)        \n","        # v表示x要改變的幅度        \n","        v = - dx * lr        \n","        x += v        \n","        xs[i+1] = x    \n","    return xs\n","\n","# Main\n","# 起始權重\n","x_start = 5    \n","# 執行週期數\n","epochs = 15 \n","# 學習率   \n","lr = 0.3   \n","# 梯度下降法 \n","x = GD(x_start, dfunc, epochs, lr=lr) \n","print (x)\n","# 輸出：[-5.     -2.     -0.8    -0.32   -0.128  -0.0512]\n","\n","color = 'r'    \n","#plt.plot(line_x, line_y, c='b')    \n","from numpy import arange\n","t = arange(-6.0, 6.0, 0.01)\n","plt.plot(t, func(t), c='b')\n","plt.plot(x, func(x), c=color, label='lr={}'.format(lr))    \n","plt.scatter(x, func(x), c=color, )    \n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"llk787v3-KOn","executionInfo":{"status":"ok","timestamp":1650525320043,"user_tz":-480,"elapsed":1572,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"b4c24538-ddc1-4223-99e0-b980d0ac9044"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[5.00000000e+00 2.00000000e+00 8.00000000e-01 3.20000000e-01\n"," 1.28000000e-01 5.12000000e-02 2.04800000e-02 8.19200000e-03\n"," 3.27680000e-03 1.31072000e-03 5.24288000e-04 2.09715200e-04\n"," 8.38860800e-05 3.35544320e-05 1.34217728e-05 5.36870912e-06]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from tensorflow import keras\n","from keras.models import Sequential\n","from keras.layers import Dense\n","\n","import numpy as np\n","data = np.random.random((1000, 10)\n","labels = np.random.randint(2, size=(1000,1)) \n","print(np.shape(data))\n","print(data[0])\n","print(np.shape(labels))\n","print(labels[0])\n","\n","model = Sequential()\n","model.add(Dense(32, activation='relu', input_dim=10))\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","model.fit(data, labels, epochs=10, batch_size=32)\n","\n","score=model.evaluate(data, labels)\n","print(score[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":132},"id":"BTXpcyEc-fiB","executionInfo":{"status":"error","timestamp":1650525418750,"user_tz":-480,"elapsed":607,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"cda639ba-ac01-4072-8821-29138d43684f"},"execution_count":3,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-43934b142e98>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    labels = np.random.randint(2, size=(1000,1))\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["from tensorflow import keras\n","from keras.models import Sequential\n","from keras.layers import Dense, Flatten\n","model=Sequential()\n","model.add(Flatten())\n","model.add(Dense(32, activation='relu', input_dim=784))\n","model.add(Dense(10, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"id":"HhmfL5LW_AW4","executionInfo":{"status":"ok","timestamp":1650525516131,"user_tz":-480,"elapsed":4642,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["mnist=keras.datasets.mnist\n","(train_data, train_label), (test_data, test_label) = mnist.load_data()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wpfRNmAU_PAQ","executionInfo":{"status":"ok","timestamp":1650525589958,"user_tz":-480,"elapsed":1070,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"ec4c7477-2443-4fbf-ff00-33aa2b6dc1bb"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["print(type(train_data))\n","print(train_data.shape)\n","print(type(train_label))\n","print(train_label.shape)\n","print(test_data.shape)\n","print(test_label.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EVg9ITWp_SJL","executionInfo":{"status":"ok","timestamp":1650525592278,"user_tz":-480,"elapsed":5,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"19e6d362-6c7b-41e7-bdcc-ecedc06b87f3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'numpy.ndarray'>\n","(60000, 28, 28)\n","<class 'numpy.ndarray'>\n","(60000,)\n","(10000, 28, 28)\n","(10000,)\n"]}]},{"cell_type":"code","source":["print(train_label[0])\n","print(train_data[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"26ie-zB__U9H","executionInfo":{"status":"ok","timestamp":1650525596902,"user_tz":-480,"elapsed":423,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"f96a9445-c780-4956-e162-51d1e83535c1"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","[[  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   3  18  18  18 126 136\n","  175  26 166 255 247 127   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0  30  36  94 154 170 253 253 253 253 253\n","  225 172 253 242 195  64   0   0   0   0]\n"," [  0   0   0   0   0   0   0  49 238 253 253 253 253 253 253 253 253 251\n","   93  82  82  56  39   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0  18 219 253 253 253 253 253 198 182 247 241\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0  80 156 107 253 253 205  11   0  43 154\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0  14   1 154 253  90   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0 139 253 190   2   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0  11 190 253  70   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0  35 241 225 160 108   1\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0  81 240 253 253 119\n","   25   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0  45 186 253 253\n","  150  27   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  16  93 252\n","  253 187   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 249\n","  253 249  64   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0  46 130 183 253\n","  253 207   2   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0  39 148 229 253 253 253\n","  250 182   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0  24 114 221 253 253 253 253 201\n","   78   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0  23  66 213 253 253 253 253 198  81   2\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0  18 171 219 253 253 253 253 195  80   9   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0  55 172 226 253 253 253 253 244 133  11   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0 136 253 253 253 212 135 132  16   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.imshow(train_data[0], cmap='binary')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"DL8tlnfZ_nhr","executionInfo":{"status":"ok","timestamp":1650525637651,"user_tz":-480,"elapsed":15,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"833e8c25-1081-498f-abbc-5c32bf2bdb7c"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOUElEQVR4nO3dX4xUdZrG8ecF8R+DCkuHtAyRGTQmHY1AStgEg+hk8U+iwI2BGERjxAuQmQTiolzAhRdGd2YyihnTqAE2IxPCSITErIMEY4iJoVC2BZVFTeNA+FOE6Dh6gTLvXvRh0mLXr5qqU3XKfr+fpNPV56nT502Fh1Ndp7t+5u4CMPQNK3oAAK1B2YEgKDsQBGUHgqDsQBAXtfJgY8eO9YkTJ7bykEAovb29OnXqlA2UNVR2M7tT0h8kDZf0krs/nbr/xIkTVS6XGzkkgIRSqVQ1q/tpvJkNl/SCpLskdUlaYGZd9X4/AM3VyM/s0yR96u6fu/sZSX+WNCefsQDkrZGyj5f0t35fH8m2/YCZLTazspmVK5VKA4cD0Iimvxrv7t3uXnL3UkdHR7MPB6CKRsp+VNKEfl//PNsGoA01UvY9kq4zs1+Y2cWS5kvals9YAPJW96U3d//ezJZKelN9l95ecfcDuU0GIFcNXWd39zckvZHTLACaiF+XBYKg7EAQlB0IgrIDQVB2IAjKDgRB2YEgKDsQBGUHgqDsQBCUHQiCsgNBUHYgCMoOBEHZgSAoOxAEZQeCoOxAEJQdCIKyA0FQdiAIyg4EQdmBICg7EARlB4Kg7EAQlB0IgrIDQVB2IIiGVnFF+zt79mwy/+qrr5p6/LVr11bNvv322+S+Bw8eTOYvvPBCMl+xYkXVbNOmTcl9L7300mS+cuXKZL569epkXoSGym5mvZK+lnRW0vfuXspjKAD5y+PMfpu7n8rh+wBoIn5mB4JotOwu6a9mttfMFg90BzNbbGZlMytXKpUGDwegXo2W/RZ3nyrpLklLzGzm+Xdw9253L7l7qaOjo8HDAahXQ2V396PZ55OStkqalsdQAPJXd9nNbKSZjTp3W9JsSfvzGgxAvhp5NX6cpK1mdu77vOru/5PLVEPMF198kczPnDmTzN99991kvnv37qrZl19+mdx3y5YtybxIEyZMSOaPPfZYMt+6dWvVbNSoUcl9b7rppmR+6623JvN2VHfZ3f1zSelHBEDb4NIbEARlB4Kg7EAQlB0IgrIDQfAnrjn44IMPkvntt9+ezJv9Z6btavjw4cn8qaeeSuYjR45M5vfff3/V7Oqrr07uO3r06GR+/fXXJ/N2xJkdCIKyA0FQdiAIyg4EQdmBICg7EARlB4LgOnsOrrnmmmQ+duzYZN7O19mnT5+ezGtdj961a1fV7OKLL07uu3DhwmSOC8OZHQiCsgNBUHYgCMoOBEHZgSAoOxAEZQeC4Dp7DsaMGZPMn3322WS+ffv2ZD5lypRkvmzZsmSeMnny5GT+1ltvJfNaf1O+f3/1pQSee+655L7IF2d2IAjKDgRB2YEgKDsQBGUHgqDsQBCUHQiC6+wtMHfu3GRe633lay0v3NPTUzV76aWXkvuuWLEimde6jl7LDTfcUDXr7u5u6HvjwtQ8s5vZK2Z20sz299s2xsx2mNmh7HP6HQwAFG4wT+PXS7rzvG0rJe109+sk7cy+BtDGapbd3d+RdPq8zXMkbchub5CUfp4KoHD1vkA3zt2PZbePSxpX7Y5mttjMymZWrlQqdR4OQKMafjXe3V2SJ/Judy+5e6mjo6PRwwGoU71lP2FmnZKUfT6Z30gAmqHesm+TtCi7vUjS6/mMA6BZal5nN7NNkmZJGmtmRyStlvS0pM1m9rCkw5Lua+aQQ90VV1zR0P5XXnll3fvWug4/f/78ZD5sGL+X9VNRs+zuvqBK9KucZwHQRPy3DARB2YEgKDsQBGUHgqDsQBD8iesQsGbNmqrZ3r17k/u+/fbbybzWW0nPnj07maN9cGYHgqDsQBCUHQiCsgNBUHYgCMoOBEHZgSC4zj4EpN7ued26dcl9p06dmswfeeSRZH7bbbcl81KpVDVbsmRJcl8zS+a4MJzZgSAoOxAEZQeCoOxAEJQdCIKyA0FQdiAIrrMPcZMmTUrm69evT+YPPfRQMt+4cWPd+TfffJPc94EHHkjmnZ2dyRw/xJkdCIKyA0FQdiAIyg4EQdmBICg7EARlB4LgOntw8+bNS+bXXnttMl++fHkyT73v/BNPPJHc9/Dhw8l81apVyXz8+PHJPJqaZ3Yze8XMTprZ/n7b1pjZUTPbl33c3dwxATRqME/j10u6c4Dtv3f3ydnHG/mOBSBvNcvu7u9IOt2CWQA0USMv0C01s57saf7oancys8VmVjazcqVSaeBwABpRb9n/KGmSpMmSjkn6bbU7unu3u5fcvdTR0VHn4QA0qq6yu/sJdz/r7v+UtE7StHzHApC3uspuZv3/tnCepP3V7gugPdS8zm5mmyTNkjTWzI5IWi1plplNluSSeiU92sQZUaAbb7wxmW/evDmZb9++vWr24IMPJvd98cUXk/mhQ4eS+Y4dO5J5NDXL7u4LBtj8chNmAdBE/LosEARlB4Kg7EAQlB0IgrIDQZi7t+xgpVLJy+Vyy46H9nbJJZck8++++y6ZjxgxIpm/+eabVbNZs2Yl9/2pKpVKKpfLA651zZkdCIKyA0FQdiAIyg4EQdmBICg7EARlB4LgraSR1NPTk8y3bNmSzPfs2VM1q3UdvZaurq5kPnPmzIa+/1DDmR0IgrIDQVB2IAjKDgRB2YEgKDsQBGUHguA6+xB38ODBZP78888n89deey2ZHz9+/IJnGqyLLkr/8+zs7Ezmw4ZxLuuPRwMIgrIDQVB2IAjKDgRB2YEgKDsQBGUHguA6+09ArWvZr776atVs7dq1yX17e3vrGSkXN998czJftWpVMr/33nvzHGfIq3lmN7MJZrbLzD4yswNm9uts+xgz22Fmh7LPo5s/LoB6DeZp/PeSlrt7l6R/l7TEzLokrZS0092vk7Qz+xpAm6pZdnc/5u7vZ7e/lvSxpPGS5kjakN1tg6S5zRoSQOMu6AU6M5soaYqk9ySNc/djWXRc0rgq+yw2s7KZlSuVSgOjAmjEoMtuZj+T9BdJv3H3v/fPvG91yAFXiHT3bncvuXupo6OjoWEB1G9QZTezEeor+p/c/dyfQZ0ws84s75R0sjkjAshDzUtvZmaSXpb0sbv/rl+0TdIiSU9nn19vyoRDwIkTJ5L5gQMHkvnSpUuT+SeffHLBM+Vl+vTpyfzxxx+vms2ZMye5L3+imq/BXGefIWmhpA/NbF+27Un1lXyzmT0s6bCk+5ozIoA81Cy7u++WNODi7pJ+le84AJqF50lAEJQdCIKyA0FQdiAIyg4EwZ+4DtLp06erZo8++mhy33379iXzzz77rK6Z8jBjxoxkvnz58mR+xx13JPPLLrvsgmdCc3BmB4Kg7EAQlB0IgrIDQVB2IAjKDgRB2YEgwlxnf++995L5M888k8z37NlTNTty5EhdM+Xl8ssvr5otW7YsuW+tt2seOXJkXTOh/XBmB4Kg7EAQlB0IgrIDQVB2IAjKDgRB2YEgwlxn37p1a0N5I7q6upL5Pffck8yHDx+ezFesWFE1u+qqq5L7Ig7O7EAQlB0IgrIDQVB2IAjKDgRB2YEgKDsQhLl7+g5mEyRtlDROkkvqdvc/mNkaSY9IqmR3fdLd30h9r1Kp5OVyueGhAQysVCqpXC4PuOryYH6p5ntJy939fTMbJWmvme3Ist+7+3/lNSiA5hnM+uzHJB3Lbn9tZh9LGt/swQDk64J+ZjeziZKmSDr3Hk9LzazHzF4xs9FV9llsZmUzK1cqlYHuAqAFBl12M/uZpL9I+o27/13SHyVNkjRZfWf+3w60n7t3u3vJ3UsdHR05jAygHoMqu5mNUF/R/+Tur0mSu59w97Pu/k9J6yRNa96YABpVs+xmZpJelvSxu/+u3/bOfnebJ2l//uMByMtgXo2fIWmhpA/N7Nzaw09KWmBmk9V3Oa5XUnrdYgCFGsyr8bslDXTdLnlNHUB74TfogCAoOxAEZQeCoOxAEJQdCIKyA0FQdiAIyg4EQdmBICg7EARlB4Kg7EAQlB0IgrIDQdR8K+lcD2ZWkXS436axkk61bIAL066ztetcErPVK8/ZrnH3Ad//raVl/9HBzcruXipsgIR2na1d55KYrV6tmo2n8UAQlB0Iouiydxd8/JR2na1d55KYrV4tma3Qn9kBtE7RZ3YALULZgSAKKbuZ3WlmB83sUzNbWcQM1ZhZr5l9aGb7zKzQ9aWzNfROmtn+ftvGmNkOMzuUfR5wjb2CZltjZkezx26fmd1d0GwTzGyXmX1kZgfM7NfZ9kIfu8RcLXncWv4zu5kNl/R/kv5D0hFJeyQtcPePWjpIFWbWK6nk7oX/AoaZzZT0D0kb3f2GbNszkk67+9PZf5Sj3f0/22S2NZL+UfQy3tlqRZ39lxmXNFfSgyrwsUvMdZ9a8LgVcWafJulTd//c3c9I+rOkOQXM0fbc/R1Jp8/bPEfShuz2BvX9Y2m5KrO1BXc/5u7vZ7e/lnRumfFCH7vEXC1RRNnHS/pbv6+PqL3We3dJfzWzvWa2uOhhBjDO3Y9lt49LGlfkMAOouYx3K523zHjbPHb1LH/eKF6g+7Fb3H2qpLskLcmerrYl7/sZrJ2unQ5qGe9WGWCZ8X8p8rGrd/nzRhVR9qOSJvT7+ufZtrbg7kezzyclbVX7LUV94twKutnnkwXP8y/ttIz3QMuMqw0euyKXPy+i7HskXWdmvzCziyXNl7StgDl+xMxGZi+cyMxGSpqt9luKepukRdntRZJeL3CWH2iXZbyrLTOugh+7wpc/d/eWf0i6W32vyH8maVURM1SZ65eS/jf7OFD0bJI2qe9p3Xfqe23jYUn/JmmnpEOS3pI0po1m+29JH0rqUV+xOgua7Rb1PUXvkbQv+7i76McuMVdLHjd+XRYIghfogCAoOxAEZQeCoOxAEJQdCIKyA0FQdiCI/wfvpjt5Q0mdXQAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["model.fit(train_data,train_label,epochs=20,batch_size=512)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SUI4fb3D_q9K","executionInfo":{"status":"ok","timestamp":1650525670682,"user_tz":-480,"elapsed":21408,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"22b11f65-6942-40ab-82ce-7c2a6fbd6939"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","118/118 [==============================] - 2s 7ms/step - loss: 4.3151 - accuracy: 0.3347\n","Epoch 2/20\n","118/118 [==============================] - 1s 7ms/step - loss: 1.1354 - accuracy: 0.6643\n","Epoch 3/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.7002 - accuracy: 0.8315\n","Epoch 4/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.5171 - accuracy: 0.8736\n","Epoch 5/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.4243 - accuracy: 0.8949\n","Epoch 6/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.3682 - accuracy: 0.9054\n","Epoch 7/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.3278 - accuracy: 0.9148\n","Epoch 8/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2924 - accuracy: 0.9216\n","Epoch 9/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2750 - accuracy: 0.9258\n","Epoch 10/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2585 - accuracy: 0.9304\n","Epoch 11/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2412 - accuracy: 0.9339\n","Epoch 12/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2304 - accuracy: 0.9361\n","Epoch 13/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2189 - accuracy: 0.9386\n","Epoch 14/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2095 - accuracy: 0.9410\n","Epoch 15/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.2047 - accuracy: 0.9433\n","Epoch 16/20\n","118/118 [==============================] - 1s 11ms/step - loss: 0.1938 - accuracy: 0.9456\n","Epoch 17/20\n","118/118 [==============================] - 1s 9ms/step - loss: 0.1914 - accuracy: 0.9468\n","Epoch 18/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.1834 - accuracy: 0.9475\n","Epoch 19/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.1778 - accuracy: 0.9488\n","Epoch 20/20\n","118/118 [==============================] - 1s 7ms/step - loss: 0.1743 - accuracy: 0.9514\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fdc41b17050>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["score=model.evaluate(test_data, test_label)\n","print(score[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uO0aQDJu_uzR","executionInfo":{"status":"ok","timestamp":1650525675226,"user_tz":-480,"elapsed":1014,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"6bf67512-d2ea-4433-bfb2-7f5d33b9f203"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step - loss: 0.3484 - accuracy: 0.9286\n","0.928600013256073\n"]}]},{"cell_type":"code","source":["!pip install CwnGraph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"adkC27SW_yit","executionInfo":{"status":"ok","timestamp":1650525713065,"user_tz":-480,"elapsed":6998,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"3edd0a10-70d7-45f6-bb7a-7d6f959cefd3"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting CwnGraph\n","  Downloading CwnGraph-0.2.0.tar.gz (27 kB)\n","Requirement already satisfied: gdown in /usr/local/lib/python3.7/dist-packages (from CwnGraph) (4.4.0)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from gdown->CwnGraph) (4.6.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from gdown->CwnGraph) (1.15.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from gdown->CwnGraph) (3.6.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from gdown->CwnGraph) (4.64.0)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.7/dist-packages (from gdown->CwnGraph) (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown->CwnGraph) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown->CwnGraph) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown->CwnGraph) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown->CwnGraph) (1.24.3)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown->CwnGraph) (1.7.1)\n","Building wheels for collected packages: CwnGraph\n","  Building wheel for CwnGraph (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for CwnGraph: filename=CwnGraph-0.2.0-py3-none-any.whl size=28834 sha256=59fce146a26b126cf5e4f3fa763785bfaf22eb5751c8fb7984c5614a6e8dda72\n","  Stored in directory: /root/.cache/pip/wheels/9d/35/e7/8f40ef849b2c591674f2cad419eac267821203ed5859b3f68b\n","Successfully built CwnGraph\n","Installing collected packages: CwnGraph\n","Successfully installed CwnGraph-0.2.0\n"]}]},{"cell_type":"code","source":["from pprint import pprint\n","from CwnGraph import CwnBase\n","CwnBase.install_cwn(\"cwn_graph.pyobj\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sGRr8vEM_6m8","executionInfo":{"status":"ok","timestamp":1650525732822,"user_tz":-480,"elapsed":2076,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"225422ba-55cf-46e1-cc78-9e898031d2e4"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[Errno 2] No such file or directory: 'cwn_graph.pyobj'\n","ERROR: install failed\n"]}]},{"cell_type":"code","source":["from CwnGraph import CwnBase\n","cwn = CwnBase()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":347},"id":"L26dTmRqAA9h","executionInfo":{"status":"error","timestamp":1650525746646,"user_tz":-480,"elapsed":442,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"233274c2-7e49-490a-cf8b-0b4d63307bda"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["ERROR: install cwn_graph.pyobj first\n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-7f488568f188>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mCwnGraph\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCwnBase\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcwn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCwnBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/CwnGraph/cwn_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     42\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ERROR: install cwn_graph.pyobj first\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m         \u001b[0mV\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_cwn_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCwnBase\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mV\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/CwnGraph/cwn_base.py\u001b[0m in \u001b[0;36mload_cwn_image\u001b[0;34m(fpath)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_cwn_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfin\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfin\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/root/.cwn_graph/cwn_graph.pyobj'"]}]},{"cell_type":"code","source":["lemmas = cwn.find_lemma(\"頭\")\n","lemmas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185},"id":"4WHQMIunAECV","executionInfo":{"status":"error","timestamp":1650525792128,"user_tz":-480,"elapsed":507,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"dcf48fbc-3d37-4204-bb06-33777d722fc2"},"execution_count":18,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-587947cca765>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlemmas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcwn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_lemma\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"頭\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlemmas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'cwn' is not defined"]}]},{"cell_type":"code","source":["import nltk\n","nltk.download('wordnet')\n","from nltk.corpus import wordnet as wn\n","wn.synsets('dog')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXiAqbaBAHAi","executionInfo":{"status":"ok","timestamp":1650525775749,"user_tz":-480,"elapsed":3647,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"dabecf6a-f62c-45b2-98d6-e6cef7f39383"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["[Synset('dog.n.01'),\n"," Synset('frump.n.01'),\n"," Synset('dog.n.03'),\n"," Synset('cad.n.01'),\n"," Synset('frank.n.02'),\n"," Synset('pawl.n.01'),\n"," Synset('andiron.n.01'),\n"," Synset('chase.v.01')]"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["import numpy as np\n","\n","M = np.array([[0, 2, 1, 1, 1, 1, 1, 2, 1, 3],\n","              [2, 0, 1, 1, 1, 0, 0, 1, 1, 2],\n","              [1, 1, 0, 1, 1, 0, 0, 0, 0, 1],\n","              [1, 1, 1, 0, 1, 0, 0, 0, 0, 1],\n","              [1, 1, 1, 1, 0, 0, 0, 0, 0, 1],\n","              [1, 0, 0, 0, 0, 0, 1, 1, 0, 1],\n","              [1, 0, 0, 0, 0, 1, 0, 1, 0, 1],\n","              [2, 1, 0, 0, 0, 1, 1, 0, 1, 2],\n","              [1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n","              [3, 2, 1, 1, 1, 1, 1, 2, 1, 0]])\n","\n","def pmi(M, positive=True):\n","    col_totals = M.sum(axis=0)\n","    row_totals = M.sum(axis=1)\n","    total = col_totals.sum()\n","    expected = np.outer(row_totals, col_totals) / total\n","    M = M / expected\n","    # Silence distracting warnings about log(0):\n","    with np.errstate(divide='ignore'):\n","        M = np.log(M)\n","    M[np.isinf(M)] = 0.0  # log(0) = 0\n","    if positive:\n","        M[M < 0] = 0.0\n","    return M\n","\n","M_pmi = pmi(M)\n","np.set_printoptions(precision=2)\n","print(M_pmi)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_KByWx8AAQKa","executionInfo":{"status":"ok","timestamp":1650525835995,"user_tz":-480,"elapsed":415,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"ed39c82e-e147-42bd-e273-c979c62af4ac"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.   0.18 0.07 0.07 0.07 0.3  0.3  0.3  0.3  0.22]\n"," [0.18 0.   0.44 0.44 0.44 0.   0.   0.   0.66 0.18]\n"," [0.07 0.44 0.   1.03 1.03 0.   0.   0.   0.   0.07]\n"," [0.07 0.44 1.03 0.   1.03 0.   0.   0.   0.   0.07]\n"," [0.07 0.44 1.03 1.03 0.   0.   0.   0.   0.   0.07]\n"," [0.3  0.   0.   0.   0.   0.   1.48 0.78 0.   0.3 ]\n"," [0.3  0.   0.   0.   0.   1.48 0.   0.78 0.   0.3 ]\n"," [0.3  0.   0.   0.   0.   0.78 0.78 0.   0.78 0.3 ]\n"," [0.3  0.66 0.   0.   0.   0.   0.   0.78 0.   0.3 ]\n"," [0.22 0.18 0.07 0.07 0.07 0.3  0.3  0.3  0.3  0.  ]]\n"]}]},{"cell_type":"code","source":["\n","!wget -O TaipeiSansTCBeta-Regular.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt \n","from matplotlib.font_manager import fontManager\n","\n","# 改style要在改font之前\n","# plt.style.use('seaborn')  \n","\n","fontManager.addfont('TaipeiSansTCBeta-Regular.ttf')\n","mpl.rc('font', family='Taipei Sans TC Beta')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XLj1QklEAclf","executionInfo":{"status":"ok","timestamp":1650525895752,"user_tz":-480,"elapsed":4773,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"f99e54a4-443a-4cfc-9c11-59634beaaa2e"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-04-21 07:27:12--  https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_\n","Resolving drive.google.com (drive.google.com)... 74.125.204.113, 74.125.204.101, 74.125.204.100, ...\n","Connecting to drive.google.com (drive.google.com)|74.125.204.113|:443... connected.\n","HTTP request sent, awaiting response... 303 See Other\n","Location: https://doc-0k-9o-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/aum7ublg7u1edrs7s9gvccqtlfni85hn/1650525975000/02847987870453524430/*/1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_ [following]\n","Warning: wildcards not supported in HTTP.\n","--2022-04-21 07:27:16--  https://doc-0k-9o-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/aum7ublg7u1edrs7s9gvccqtlfni85hn/1650525975000/02847987870453524430/*/1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_\n","Resolving doc-0k-9o-docs.googleusercontent.com (doc-0k-9o-docs.googleusercontent.com)... 108.177.125.132, 2404:6800:4008:c01::84\n","Connecting to doc-0k-9o-docs.googleusercontent.com (doc-0k-9o-docs.googleusercontent.com)|108.177.125.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 20659344 (20M) [application/x-font-ttf]\n","Saving to: ‘TaipeiSansTCBeta-Regular.ttf’\n","\n","TaipeiSansTCBeta-Re 100%[===================>]  19.70M   122MB/s    in 0.2s    \n","\n","2022-04-21 07:27:16 (122 MB/s) - ‘TaipeiSansTCBeta-Regular.ttf’ saved [20659344/20659344]\n","\n"]}]},{"cell_type":"code","source":["# Defined in Section 2.1.2\n","\n","import numpy as np\n","\n","M = np.array([[0, 2, 1, 1, 1, 1, 1, 2, 1, 3],\n","              [2, 0, 1, 1, 1, 0, 0, 1, 1, 2],\n","              [1, 1, 0, 1, 1, 0, 0, 0, 0, 1],\n","              [1, 1, 1, 0, 1, 0, 0, 0, 0, 1],\n","              [1, 1, 1, 1, 0, 0, 0, 0, 0, 1],\n","              [1, 0, 0, 0, 0, 0, 1, 1, 0, 1],\n","              [1, 0, 0, 0, 0, 1, 0, 1, 0, 1],\n","              [2, 1, 0, 0, 0, 1, 1, 0, 1, 2],\n","              [1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n","              [3, 2, 1, 1, 1, 1, 1, 2, 1, 0]])\n","\n","def pmi(M, positive=True):\n","    col_totals = M.sum(axis=0)\n","    row_totals = M.sum(axis=1)\n","    total = col_totals.sum()\n","    expected = np.outer(row_totals, col_totals) / total\n","    M = M / expected\n","    # Silence distracting warnings about log(0):\n","    with np.errstate(divide='ignore'):\n","        M = np.log(M)\n","    M[np.isinf(M)] = 0.0  # log(0) = 0\n","    if positive:\n","        M[M < 0] = 0.0\n","    return M\n","\n","M_pmi = pmi(M)\n","\n","np.set_printoptions(precision=2)\n","U, s, Vh = np.linalg.svd(M_pmi)\n","\n","import matplotlib.pyplot as plt\n","plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n","\n","words = [\"我\", \"喜歡\", \"自然\", \"語言\", \"處理\", \"愛\", \"深度\", \"學習\", \"機器\", \"。\"]\n","\n","for i in range(len(words)):\n","    plt.text(U[i, 0], U[i, 1], words[i])\n","plt.xlim(0, 0.6)\n","plt.ylim(-0.5, 0.6)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"R6alkFdBAnZW","executionInfo":{"status":"ok","timestamp":1650525909588,"user_tz":-480,"elapsed":566,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"764ac60e-12fe-49fb-b90d-24c8619f2f03"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","country=['Taiwan','Australia','Ireland','Australia','Ireland','Taiwan']\n","age=[25,30,45,35,22,36]\n","salary=[20000,32000,59000,60000,43000,52000]\n","dic={'Country':country,'Age':age,'Salary':salary}\n","data=pd.DataFrame(dic)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"tkZHeH9tAsHL","executionInfo":{"status":"ok","timestamp":1650525966201,"user_tz":-480,"elapsed":405,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"28f4abb5-719c-40aa-a358-2675fceb9ac8"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Country  Age  Salary\n","0     Taiwan   25   20000\n","1  Australia   30   32000\n","2    Ireland   45   59000\n","3  Australia   35   60000\n","4    Ireland   22   43000\n","5     Taiwan   36   52000"],"text/html":["\n","  <div id=\"df-b4c4143f-52f7-4e73-bfa5-6eab1d543056\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country</th>\n","      <th>Age</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Taiwan</td>\n","      <td>25</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Australia</td>\n","      <td>30</td>\n","      <td>32000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Ireland</td>\n","      <td>45</td>\n","      <td>59000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Australia</td>\n","      <td>35</td>\n","      <td>60000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Ireland</td>\n","      <td>22</td>\n","      <td>43000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Taiwan</td>\n","      <td>36</td>\n","      <td>52000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4c4143f-52f7-4e73-bfa5-6eab1d543056')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4c4143f-52f7-4e73-bfa5-6eab1d543056 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4c4143f-52f7-4e73-bfa5-6eab1d543056');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","labelencoder = LabelEncoder()\n","data_le=pd.DataFrame(dic)\n","data_le['Country'] = labelencoder.fit_transform(data['Country'])\n","data_le"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"lXS7f3AnA6SO","executionInfo":{"status":"ok","timestamp":1650525984878,"user_tz":-480,"elapsed":649,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"11a3cce6-1fd6-4813-d8a2-bcde09003293"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Country  Age  Salary\n","0        2   25   20000\n","1        0   30   32000\n","2        1   45   59000\n","3        0   35   60000\n","4        1   22   43000\n","5        2   36   52000"],"text/html":["\n","  <div id=\"df-be4f736c-188f-4234-ae4c-44f31497502a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country</th>\n","      <th>Age</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>25</td>\n","      <td>20000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>32000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>45</td>\n","      <td>59000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>60000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>43000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2</td>\n","      <td>36</td>\n","      <td>52000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be4f736c-188f-4234-ae4c-44f31497502a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-be4f736c-188f-4234-ae4c-44f31497502a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-be4f736c-188f-4234-ae4c-44f31497502a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","ct = ColumnTransformer([(\"Country\", OneHotEncoder(), [0])], remainder = 'passthrough')\n","data_str_ohe=ct.fit_transform(data_le)\n","pd.DataFrame(data_str_ohe)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"J64nawiZA-LW","executionInfo":{"status":"ok","timestamp":1650525996344,"user_tz":-480,"elapsed":604,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"9093019b-6551-4a82-f597-64234b8c2abd"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     0    1    2     3        4\n","0  0.0  0.0  1.0  25.0  20000.0\n","1  1.0  0.0  0.0  30.0  32000.0\n","2  0.0  1.0  0.0  45.0  59000.0\n","3  1.0  0.0  0.0  35.0  60000.0\n","4  0.0  1.0  0.0  22.0  43000.0\n","5  0.0  0.0  1.0  36.0  52000.0"],"text/html":["\n","  <div id=\"df-e9670ad9-e8ed-49e6-aa91-ba8e13c5a616\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>25.0</td>\n","      <td>20000.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>30.0</td>\n","      <td>32000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>45.0</td>\n","      <td>59000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>35.0</td>\n","      <td>60000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>22.0</td>\n","      <td>43000.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>36.0</td>\n","      <td>52000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9670ad9-e8ed-49e6-aa91-ba8e13c5a616')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e9670ad9-e8ed-49e6-aa91-ba8e13c5a616 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e9670ad9-e8ed-49e6-aa91-ba8e13c5a616');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["data_dum = pd.get_dummies(data)\n","pd.DataFrame(data_dum)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"M5PrwsJXBA0M","executionInfo":{"status":"ok","timestamp":1650526005627,"user_tz":-480,"elapsed":6,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"2645f33f-ff42-4a1f-f3aa-7ff432ec6ad6"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age  Salary  Country_Australia  Country_Ireland  Country_Taiwan\n","0   25   20000                  0                0               1\n","1   30   32000                  1                0               0\n","2   45   59000                  0                1               0\n","3   35   60000                  1                0               0\n","4   22   43000                  0                1               0\n","5   36   52000                  0                0               1"],"text/html":["\n","  <div id=\"df-58a01aee-48f5-4d6e-8b12-69537e7579cf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Salary</th>\n","      <th>Country_Australia</th>\n","      <th>Country_Ireland</th>\n","      <th>Country_Taiwan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>25</td>\n","      <td>20000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>30</td>\n","      <td>32000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45</td>\n","      <td>59000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>35</td>\n","      <td>60000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>22</td>\n","      <td>43000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>36</td>\n","      <td>52000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58a01aee-48f5-4d6e-8b12-69537e7579cf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-58a01aee-48f5-4d6e-8b12-69537e7579cf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-58a01aee-48f5-4d6e-8b12-69537e7579cf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import os\n","import time\n","\n","plt.style.use(style='seaborn')\n","%matplotlib inline"],"metadata":{"id":"_aPDJG0gBDEc","executionInfo":{"status":"ok","timestamp":1650526048528,"user_tz":-480,"elapsed":500,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv('all-data.csv',encoding = \"ISO-8859-1\", header=None, names = ['Sentiment', 'News Headline'])\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"tAnQD8knBN0O","executionInfo":{"status":"error","timestamp":1650526058903,"user_tz":-480,"elapsed":456,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"7344ce3d-32bb-4a45-9be5-4b7c8621dbe6"},"execution_count":27,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-3fb5a6f45af8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'all-data.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"ISO-8859-1\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Sentiment'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'News Headline'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'all-data.csv'"]}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"wm8LHWMpBQaZ","executionInfo":{"status":"error","timestamp":1650526073445,"user_tz":-480,"elapsed":413,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"ac853101-241c-470f-8a13-bb536a7aca79"},"execution_count":28,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-a74c58233b9e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"ywjXUj6QBTfW","executionInfo":{"status":"error","timestamp":1650526086382,"user_tz":-480,"elapsed":438,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"a5753be3-9115-4ae7-fe14-fd7ac97118a2"},"execution_count":29,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-39de6da29611>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["df['Sentiment'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"308sIpg0BYSu","executionInfo":{"status":"error","timestamp":1650526100429,"user_tz":-480,"elapsed":5,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"7143a01b-7ecd-41d3-cfaf-9016bae7117a"},"execution_count":30,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-f128086837da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sentiment'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["y=df['Sentiment'].values\n","y.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185},"id":"6QKspLDSBaSn","executionInfo":{"status":"error","timestamp":1650526126735,"user_tz":-480,"elapsed":428,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"53156d0a-42b2-4524-b983-a4e58d1ee12b"},"execution_count":31,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-48c12269eb9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sentiment'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["x=df['News Headline'].values\n","x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185},"id":"GZM76_UbBir6","executionInfo":{"status":"error","timestamp":1650526141412,"user_tz":-480,"elapsed":447,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"cb8d3a71-2445-4af1-8b1d-5ff713d51ef2"},"execution_count":32,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-51bb22e71e99>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'News Headline'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split"],"metadata":{"id":"0aLjOp5CBmNE","executionInfo":{"status":"ok","timestamp":1650526155503,"user_tz":-480,"elapsed":449,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["(x_train,x_test,y_train,y_test)=train_test_split(x,y,test_size=0.4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"49Nq1toVBneb","executionInfo":{"status":"error","timestamp":1650526167812,"user_tz":-480,"elapsed":12,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"f29ff20d-eabb-4b32-cb9b-76fe8918731b"},"execution_count":34,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-608dfd56176c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y' is not defined"]}]},{"cell_type":"code","source":["x_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"_rkwgiZHBqZk","executionInfo":{"status":"error","timestamp":1650526176999,"user_tz":-480,"elapsed":7,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"d6e48813-00f1-4963-d76f-0aaaea284f18"},"execution_count":35,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-2132a220a582>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}]},{"cell_type":"code","source":["y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"B1jsOVXUBsdn","executionInfo":{"status":"error","timestamp":1650526184103,"user_tz":-480,"elapsed":11,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"f8fe207a-deed-4c24-a45d-7f32609a7081"},"execution_count":36,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-30602697b5a7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_train' is not defined"]}]},{"cell_type":"code","source":["x_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"E_4dBV39BvwA","executionInfo":{"status":"error","timestamp":1650526195021,"user_tz":-480,"elapsed":476,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"9dea6803-2a9f-4b16-eedc-95616dfe847f"},"execution_count":37,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-189e6887f2da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_test' is not defined"]}]},{"cell_type":"code","source":["y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"spNIc3LgByQR","executionInfo":{"status":"error","timestamp":1650526203079,"user_tz":-480,"elapsed":6,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"00426db8-6701-40a8-92cb-3d22c88012f0"},"execution_count":38,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-4f30429c224a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}]},{"cell_type":"code","source":["x_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"6Vh3ARP0B0Z2","executionInfo":{"status":"error","timestamp":1650526212953,"user_tz":-480,"elapsed":12,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"233417da-f558-4844-c4ee-9f13b0c46556"},"execution_count":39,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-80784060c951>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}]},{"cell_type":"code","source":["df1=pd.DataFrame(x_train)\n","df1=df1.rename(columns={0:'news'})\n","\n","df2=pd.DataFrame(y_train)\n","df2=df2.rename(columns={0:'sentiment'})\n","df_train=pd.concat([df1,df2],axis=1)\n","\n","df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"Q8zvQ6GgB21o","executionInfo":{"status":"error","timestamp":1650526224136,"user_tz":-480,"elapsed":440,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"fe160151-be46-4939-d64a-d7694af445d9"},"execution_count":40,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-d1920e53e82b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'sentiment'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}]},{"cell_type":"code","source":["df_train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"rrWVBg11B4F5","executionInfo":{"status":"error","timestamp":1650526232575,"user_tz":-480,"elapsed":419,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"5156a597-be8c-4801-abad-04693aefaa82"},"execution_count":41,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-ee96d3489828>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"]}]},{"cell_type":"code","source":["df3=pd.DataFrame(x_test)\n","df3=df3.rename(columns={0:'news'})\n","\n","df4=pd.DataFrame(y_test)\n","df4=df2.rename(columns={0:'sentiment'})\n","df_test=pd.concat([df3,df4],axis=1)\n","\n","df_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"IKHSjQntB6ud","executionInfo":{"status":"error","timestamp":1650526246581,"user_tz":-480,"elapsed":7,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"56013515-5872-4da3-fc1c-f94112f269a8"},"execution_count":42,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-cb88609e5273>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf4\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf4\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'sentiment'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_test' is not defined"]}]},{"cell_type":"code","source":["df_test.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"vNxEtN8ZB9h-","executionInfo":{"status":"error","timestamp":1650526254804,"user_tz":-480,"elapsed":9,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"cba76be1-99f9-4ce9-9d94-8315ae68c40f"},"execution_count":43,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-59d2a3db6f98>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df_test' is not defined"]}]},{"cell_type":"code","source":["#removing punctuations\n","#library that contains punctuation\n","import string\n","string.punctuation"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"k9xytSNbCA8u","executionInfo":{"status":"ok","timestamp":1650526264561,"user_tz":-480,"elapsed":577,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"39a55dc0-3b5b-4a65-fb43-d1e2e5550d6e"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["#defining the function to remove punctuation\n","def remove_punctuation(text):\n","  if(type(text)==float):\n","    return text\n","  ans=\"\"  \n","  for i in text:     \n","    if i not in string.punctuation:\n","      ans+=i    \n","  return ans\n","\n","#storing the puntuation free text in a new column called clean_msg\n","df_train['news']= df_train['news'].apply(lambda x:remove_punctuation(x))\n","df_test['news']= df_test['news'].apply(lambda x:remove_punctuation(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"eQKOik08CCSK","executionInfo":{"status":"error","timestamp":1650526275130,"user_tz":-480,"elapsed":7,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"9b44603f-da98-45a8-82b0-52a3e51e0dd2"},"execution_count":45,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-35176180bfb1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m#storing the puntuation free text in a new column called clean_msg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mremove_punctuation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'news'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mremove_punctuation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"]}]},{"cell_type":"code","source":["df_train.head()\n","#punctuations are removed from news column in train dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":185},"id":"mp-DXHXhCFOE","executionInfo":{"status":"error","timestamp":1650526286156,"user_tz":-480,"elapsed":409,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"1111013c-e489-4eaf-ec2c-9173068c5948"},"execution_count":46,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-2e5a881742f1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#punctuations are removed from news column in train dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"]}]},{"cell_type":"code","source":["import nltk\n","from nltk.corpus import stopwords"],"metadata":{"id":"0rwWp6UHCHP3","executionInfo":{"status":"ok","timestamp":1650526298218,"user_tz":-480,"elapsed":400,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["nltk.download('stopwords')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W9P93zRHCKdk","executionInfo":{"status":"ok","timestamp":1650526306018,"user_tz":-480,"elapsed":9,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"28aec349-080a-4c18-e5ee-dba0b22fdeb2"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["#method to generate n-grams:\n","#params:\n","#text-the text for which we have to generate n-grams\n","#ngram-number of grams to be generated from the text(1,2,3,4 etc., default value=1)\n","\n","\n","def generate_N_grams(text,ngram=1):\n","  words=[word for word in text.split(\" \") if word not in set(stopwords.words('english'))]  \n","  print(\"Sentence after removing stopwords:\",words)\n","  temp=zip(*[words[i:] for i in range(0,ngram)])\n","  ans=[' '.join(ngram) for ngram in temp]\n","  return ans"],"metadata":{"id":"-GMNbBJqCMUT","executionInfo":{"status":"ok","timestamp":1650526319368,"user_tz":-480,"elapsed":3,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["#sample!\n","generate_N_grams(\"The sun rises in the east\",3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xVXDXfmGCQCh","executionInfo":{"status":"ok","timestamp":1650526330826,"user_tz":-480,"elapsed":653,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"b0a5bdd0-edea-45d9-80cf-f59d63ac02a2"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Sentence after removing stopwords: ['The', 'sun', 'rises', 'east']\n"]},{"output_type":"execute_result","data":{"text/plain":["['The sun rises', 'sun rises east']"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["from collections import defaultdict"],"metadata":{"id":"wbsgXYmhCU1r","executionInfo":{"status":"ok","timestamp":1650526354160,"user_tz":-480,"elapsed":449,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["positiveValues=defaultdict(int)\n","negativeValues=defaultdict(int)\n","neutralValues=defaultdict(int)\n","#get the count of every word in both the columns of df_train and df_test dataframes"],"metadata":{"id":"j1VBoorVCYF0","executionInfo":{"status":"ok","timestamp":1650526364785,"user_tz":-480,"elapsed":578,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["#get the count of every word in both the columns of df_train and df_test dataframes where sentiment=\"positive\"\n","for text in df_train[df_train.sentiment==\"positive\"].news:\n","  for word in generate_N_grams(text):\n","    positiveValues[word]+=1\n","\n","#get the count of every word in both the columns of df_train and df_test dataframes where sentiment=\"negative\"\n","for text in df_train[df_train.sentiment==\"negative\"].news:\n","  for word in generate_N_grams(text):\n","    negativeValues[word]+=1\n","\n","#get the count of every word in both the columns of df_train and df_test dataframes where sentiment=\"neutral\"\n","for text in df_train[df_train.sentiment==\"neutral\"].news:\n","  for word in generate_N_grams(text):\n","    neutralValues[word]+=1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"yChneUyDCb9z","executionInfo":{"status":"error","timestamp":1650526374796,"user_tz":-480,"elapsed":7,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"d2ceff89-a6bf-4ce9-cbe8-d0cdfd2e9c7f"},"execution_count":53,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-331e1476a560>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#get the count of every word in both the columns of df_train and df_test dataframes where sentiment=\"positive\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msentiment\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"positive\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnews\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgenerate_N_grams\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mpositiveValues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_train' is not defined"]}]},{"cell_type":"code","source":["#focus on more frequently occuring words for every sentiment=>\n","#sort in DO wrt 2nd column in each of positiveValues,negativeValues and neutralValues\n","\n","df_positive3=pd.DataFrame(sorted(positiveValues3.items(),key=lambda x:x[1],reverse=True))\n","df_negative3=pd.DataFrame(sorted(negativeValues3.items(),key=lambda x:x[1],reverse=True))\n","df_neutral3=pd.DataFrame(sorted(neutralValues3.items(),key=lambda x:x[1],reverse=True))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"WVonDfZ8CdQd","executionInfo":{"status":"error","timestamp":1650526427666,"user_tz":-480,"elapsed":29,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"6657fce4-59f1-4e3d-8a26-cf6a078212ca"},"execution_count":54,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-768cfb36d546>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#sort in DO wrt 2nd column in each of positiveValues,negativeValues and neutralValues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdf_positive3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpositiveValues3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdf_negative3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnegativeValues3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mdf_neutral3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneutralValues3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'positiveValues3' is not defined"]}]},{"cell_type":"code","source":["pd1tri=df_positive3[0][:10]\n","pd2tri=df_positive3[1][:10]\n","\n","ned1tri=df_negative3[0][:10]\n","ned2tri=df_negative3[1][:10]\n","\n","nud1tri=df_neutral3[0][:10]\n","nud2tri=df_neutral3[1][:10]\n","\n","plt.figure(1,figsize=(16,4))\n","\n","plt.bar(pd1tri,pd2tri, color ='green',\n","        width = 0.4)\n"," \n","plt.xlabel(\"Words in positive dataframe\")\n","plt.ylabel(\"Count\")\n","plt.title(\"Top 10 words in positive dataframe-TRIGRAM ANALYSIS\")\n","\n","plt.savefig(\"positive-trigram.png\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"5Ejis13rCps6","executionInfo":{"status":"error","timestamp":1650526438932,"user_tz":-480,"elapsed":423,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"6e98ea29-7baf-4ee9-e9de-881695bc7a1f"},"execution_count":55,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-0fd41f230bfb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpd1tri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_positive3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mpd2tri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_positive3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mned1tri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_negative3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mned2tri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf_negative3\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df_positive3' is not defined"]}]},{"cell_type":"code","source":["df_positive3.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"sFWomAVFCsjW","executionInfo":{"status":"error","timestamp":1650526447201,"user_tz":-480,"elapsed":526,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"6b502f78-9c51-41c7-8983-bdeddb506e30"},"execution_count":56,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-56-e0ffc93c733a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_positive3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df_positive3' is not defined"]}]},{"cell_type":"code","source":["plt.figure(1,figsize=(16,4))\n","\n","plt.bar(ned1tri,ned2tri, color ='red',\n","        width = 0.4)\n"," \n","plt.xlabel(\"Words in negative dataframe\")\n","plt.ylabel(\"Count\")\n","plt.title(\"Top 10 words in negative dataframe-TRIGRAM ANALYSIS\")\n","\n","plt.savefig(\"negative-trigram.png\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":254},"id":"2y560yGNCunl","executionInfo":{"status":"error","timestamp":1650526456675,"user_tz":-480,"elapsed":461,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"d699d5f0-9ca3-4c9d-95ef-25d5f8cdb959"},"execution_count":57,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-57-4aeb183f16a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m plt.bar(ned1tri,ned2tri, color ='red',\n\u001b[0m\u001b[1;32m      4\u001b[0m         width = 0.4)\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'ned1tri' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x288 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["df_negative3.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"xopNbkqZCyB9","executionInfo":{"status":"error","timestamp":1650526466490,"user_tz":-480,"elapsed":497,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"b747e713-8c42-4e7b-f1b0-e158eb507d69"},"execution_count":58,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-58-0aafbef76239>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_negative3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df_negative3' is not defined"]}]},{"cell_type":"code","source":["plt.figure(1,figsize=(16,4))\n","\n","plt.bar(nud1tri,nud2tri, color ='yellow',\n","        width = 0.4)\n"," \n","plt.xlabel(\"Words in neutral dataframe\")\n","plt.ylabel(\"Count\")\n","plt.title(\"Top 10 words in neutral dataframe-TRIGRAM ANALYSIS\")\n","\n","plt.savefig(\"neutral-trigram.png\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":254},"id":"3MYeHX7qC04N","executionInfo":{"status":"error","timestamp":1650526476699,"user_tz":-480,"elapsed":10,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"f2e50fe0-d52a-423f-f117-278f13d7867a"},"execution_count":59,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-63a4fe3b8916>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m plt.bar(nud1tri,nud2tri, color ='yellow',\n\u001b[0m\u001b[1;32m      4\u001b[0m         width = 0.4)\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'nud1tri' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x288 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["df_neutral3.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"rGyMDNxqC3L9","executionInfo":{"status":"error","timestamp":1650526493447,"user_tz":-480,"elapsed":454,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"c9f5c5b0-6085-4dcb-fab3-3ae30aefb365"},"execution_count":60,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-1997c68209e5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_neutral3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df_neutral3' is not defined"]}]},{"cell_type":"code","source":["def load_dict():\n","    f = open(\"lexicon.txt\")\n","    lexicon = set()\n","    max_len = 0\n","    for line in f:\n","        word = line.strip()\n","        lexicon.add(word)\n","        if len(word) > max_len:\n","            max_len = len(word)\n","    f.close()\n","\n","    return lexicon, max_len\n","\n","def fmm_word_seg(sentence, lexicon, max_len):\n","    begin = 0\n","    end = min(begin + max_len, len(sentence))\n","    words = []\n","    while begin < end:\n","        word = sentence[begin:end]\n","        if word in lexicon or end - begin == 1:\n","            words.append(word)\n","            begin = end\n","            end = min(begin + max_len, len(sentence))\n","        else:\n","            end -= 1\n","    return words\n","\n","lexicon, max_len = load_dict()\n","words = fmm_word_seg(input(\"輸入句字：\"), lexicon, max_len)\n","\n","for word in words:\n","    print(word,)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":358},"id":"VvEpJcB0C-yz","executionInfo":{"status":"error","timestamp":1650526551853,"user_tz":-480,"elapsed":410,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"b434f310-0f01-4245-8a0b-2382cafb9cd3"},"execution_count":62,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-62-108645c9c89f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0mlexicon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0mwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfmm_word_seg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"輸入句字：\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlexicon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-62-108645c9c89f>\u001b[0m in \u001b[0;36mload_dict\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"lexicon.txt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mlexicon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mmax_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'lexicon.txt'"]}]},{"cell_type":"code","source":["# ! wget https://dumps.wikimedia.org/zhwiki/20220401/zhwiki-20220401-pages-articles-multistream.xml.bz2"],"metadata":{"id":"d2ukirdlC_03","executionInfo":{"status":"ok","timestamp":1650526576313,"user_tz":-480,"elapsed":413,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["!wget https://dumps.wikimedia.org/zhwiki/20220401/zhwiki-20220401-pages-articles-multistream1.xml-p1p187712.bz2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JNn_7C3dDOwL","executionInfo":{"status":"ok","timestamp":1650526646498,"user_tz":-480,"elapsed":47442,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"8f933fa1-a165-4a30-a864-2fccbecb67d9"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-04-21 07:39:00--  https://dumps.wikimedia.org/zhwiki/20220401/zhwiki-20220401-pages-articles-multistream1.xml-p1p187712.bz2\n","Resolving dumps.wikimedia.org (dumps.wikimedia.org)... 208.80.154.7, 2620:0:861:1:208:80:154:7\n","Connecting to dumps.wikimedia.org (dumps.wikimedia.org)|208.80.154.7|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 215920539 (206M) [application/octet-stream]\n","Saving to: ‘zhwiki-20220401-pages-articles-multistream1.xml-p1p187712.bz2’\n","\n","zhwiki-20220401-pag 100%[===================>] 205.92M  4.71MB/s    in 46s     \n","\n","2022-04-21 07:39:47 (4.47 MB/s) - ‘zhwiki-20220401-pages-articles-multistream1.xml-p1p187712.bz2’ saved [215920539/215920539]\n","\n"]}]},{"cell_type":"code","source":["!pip install opencc-python-reimplemented"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MpACVYWpDT0c","executionInfo":{"status":"ok","timestamp":1650526651741,"user_tz":-480,"elapsed":5251,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"0fd697ab-0135-4db6-dea3-5935cd14c198"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting opencc-python-reimplemented\n","  Downloading opencc-python-reimplemented-0.1.6.tar.gz (484 kB)\n","\u001b[K     |████████████████████████████████| 484 kB 4.4 MB/s \n","\u001b[?25hBuilding wheels for collected packages: opencc-python-reimplemented\n","  Building wheel for opencc-python-reimplemented (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for opencc-python-reimplemented: filename=opencc_python_reimplemented-0.1.6-py2.py3-none-any.whl size=486152 sha256=43d52b30f48fdcc560d506a5d3e9d6115f976f773c9e37975fcb5b2ffb561878\n","  Stored in directory: /root/.cache/pip/wheels/4e/e2/60/d062d260be08788bb389521544a8fc173de9a9a78d6a593344\n","Successfully built opencc-python-reimplemented\n","Installing collected packages: opencc-python-reimplemented\n","Successfully installed opencc-python-reimplemented-0.1.6\n"]}]},{"cell_type":"code","source":["from gensim.corpora import WikiCorpus\n","\n","wiki_corpus = WikiCorpus('zhwiki-20220401-pages-articles-multistream1.xml-p1p187712.bz2', dictionary={})"],"metadata":{"id":"gZs_7jZDDWgg","executionInfo":{"status":"ok","timestamp":1650526652172,"user_tz":-480,"elapsed":443,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["wiki_corpus"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4qAKQc2_Dayq","executionInfo":{"status":"ok","timestamp":1650526652172,"user_tz":-480,"elapsed":6,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"87918354-a019-4add-980b-59fed2869e06"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<gensim.corpora.wikicorpus.WikiCorpus at 0x7fdc350934d0>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["next(iter(wiki_corpus.get_texts()))[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_M0VMSKoDc_O","executionInfo":{"status":"ok","timestamp":1650526652799,"user_tz":-480,"elapsed":631,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"2371d6aa-5906-4aa8-fe6b-67300b27d111"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['歐幾里得',\n"," '西元前三世紀的古希臘數學家',\n"," '現在被認為是幾何之父',\n"," '此畫為拉斐爾的作品',\n"," '雅典學院',\n"," '数学',\n"," '是研究數量',\n"," '从某种角度看屬於形式科學的一種',\n"," '數學利用抽象化和邏輯推理',\n"," '從計數']"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["text_num = 0\n","\n","with open('wiki_text.txt', 'w', encoding='utf-8') as f:\n","    for text in wiki_corpus.get_texts():\n","        f.write(' '.join(text)+'\\n')\n","        text_num += 1\n","        if text_num % 10000 == 0:\n","            print('{} articles processed.'.format(text_num))\n","\n","    print('{} articles processed.'.format(text_num))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PHJXqEBeDiNr","executionInfo":{"status":"ok","timestamp":1650526961491,"user_tz":-480,"elapsed":299430,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"14608a49-ff1b-4800-cf37-1b5b491426f9"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["10000 articles processed.\n","20000 articles processed.\n","30000 articles processed.\n","32329 articles processed.\n"]}]},{"cell_type":"code","source":["import jieba\n","from opencc import OpenCC\n","\n","\n","# Initial\n","cc = OpenCC('s2t')\n","train_data = open('wiki_text.txt', 'r', encoding='utf-8').read()\n","train_data = cc.convert(train_data)\n","train_data = jieba.lcut(train_data)\n","train_data = [word for word in train_data if word != '']\n","train_data = ' '.join(train_data)\n","open('seg.txt', 'w', encoding='utf-8').write(train_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2_aQtTu6Dkzl","executionInfo":{"status":"ok","timestamp":1650528003097,"user_tz":-480,"elapsed":1041621,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"8689bb92-1a32-4638-9fe5-5f3b5124195f"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stderr","text":["Building prefix dict from the default dictionary ...\n","Dumping model to file cache /tmp/jieba.cache\n","Loading model cost 1.433 seconds.\n","Prefix dict has been built successfully.\n"]},{"output_type":"execute_result","data":{"text/plain":["129900316"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["from gensim.models import word2vec\n","\n","\n","# Settings\n","seed = 666\n","sg = 0\n","window_size = 10\n","vector_size = 100\n","min_count = 1\n","workers = 8\n","epochs = 5\n","batch_words = 10000\n","\n","train_data = word2vec.LineSentence('seg.txt')\n","model = word2vec.Word2Vec(\n","    train_data,\n","    min_count=min_count,\n","    size=vector_size,\n","    workers=workers,\n","    iter=epochs,\n","    window=window_size,\n","    sg=sg,\n","    seed=seed,\n","    batch_words=batch_words\n",")\n","\n","model.save('word2vec.model')"],"metadata":{"id":"cERi2GNJDnbx","executionInfo":{"status":"ok","timestamp":1650529065077,"user_tz":-480,"elapsed":1061994,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["from gensim.models import word2vec\n","\n","string = '電腦'\n","model = word2vec.Word2Vec.load('word2vec.model')\n","print(string)\n","\n","for item in model.wv.most_similar(string):\n","    print(item)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HebBtvHwDqBL","executionInfo":{"status":"ok","timestamp":1650529081261,"user_tz":-480,"elapsed":16196,"user":{"displayName":"温禹玟","userId":"15990660425607064800"}},"outputId":"bf8aae5d-0ce0-4de7-dcab-58a111fd0af6"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["電腦\n","('智慧型', 0.7732142210006714)\n","('計算機', 0.7708053588867188)\n","('軟體', 0.7650609016418457)\n","('程式', 0.7424694299697876)\n","('ibm', 0.7413363456726074)\n","('遊戲機', 0.7387282252311707)\n","('硬體', 0.7338895201683044)\n","('pc', 0.7335718870162964)\n","('pda', 0.7290668487548828)\n","('數位', 0.72419673204422)\n"]}]}]}